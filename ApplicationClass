/**
* Base class for maintaining global application state.
* You can provide your own implementation by creating a subclass 
* and specifying the fully-qualified name of this subclass as the "android:name" 
* attribute in your AndroidManifest.xml's <application> tag. 
* The Application class, or your subclass of the Application class, 
* is instantiated before any other class when the process for your application/package is created.
* Note: There is normally no need to subclass Application. 
* In most situations, static singletons can provide the same functionality in a more modular way. 
* If your singleton needs a global context (for example to register broadcast receivers), 
* include Context.getApplicationContext() as a Context argument when invoking your singleton's getInstance() method.
**/
// Use:
MyApplication mApplication = (MyApplication)getApplicationContext();
String username = mApplication.getUsername();
String password = mApplication.getPassword();

// Class:
public class MyApplication extends Application {
    private static MyApplication singleton;

    private MyApplication() {
      // Private constructor
    }
    
    public MyApplication getInstance(){
        if (singleton == null)
          singleton = new MyApplication();
        return singleton;
    }
    @Override
    public void onCreate() {
        super.onCreate();
        singleton = this;
    }
}

------------------------------------------------------------------------------------------
// Create a Java Class to store the static variables and use them as needed.
public class ApplicationVariables {
    public static final String RESULT_RECEIVER = "receiver";

}

// Use:
ResultReceiver receiver = intent.getParcelableExtra(ApplicationVariables.RESULT_RECEIVER);


